# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input BankCampaignCompletionCreateManyBelongsToUserInput {
  amount: Float!
  id: String
  removedFromInstitution: String!
  withdrawalReceiptImageURL: String!
}

input BankCampaignCompletionCreateManyBelongsToUserInputEnvelope {
  data: [BankCampaignCompletionCreateManyBelongsToUserInput!]!
  skipDuplicates: Boolean
}

input BankCampaignCompletionCreateNestedManyWithoutBelongsToUserInput {
  connect: [BankCampaignCompletionWhereUniqueInput!]
  connectOrCreate: [BankCampaignCompletionCreateOrConnectWithoutBelongsToUserInput!]
  create: [BankCampaignCompletionCreateWithoutBelongsToUserInput!]
  createMany: BankCampaignCompletionCreateManyBelongsToUserInputEnvelope
}

input BankCampaignCompletionCreateOrConnectWithoutBelongsToUserInput {
  create: BankCampaignCompletionCreateWithoutBelongsToUserInput!
  where: BankCampaignCompletionWhereUniqueInput!
}

input BankCampaignCompletionCreateWithoutBelongsToUserInput {
  amount: Float!
  id: String
  removedFromInstitution: String!
  withdrawalReceiptImageURL: String!
}

input BankCampaignCompletionListRelationFilter {
  every: BankCampaignCompletionWhereInput
  none: BankCampaignCompletionWhereInput
  some: BankCampaignCompletionWhereInput
}

input BankCampaignCompletionOrderByRelationAggregateInput {
  _count: SortOrder
}

input BankCampaignCompletionWhereInput {
  AND: [BankCampaignCompletionWhereInput!]
  NOT: [BankCampaignCompletionWhereInput!]
  OR: [BankCampaignCompletionWhereInput!]
  amount: FloatFilter
  belongsToUser: UserRelationFilter
  id: StringFilter
  removedFromInstitution: StringFilter
  userId: StringFilter
  withdrawalReceiptImageURL: StringFilter
}

input BankCampaignCompletionWhereUniqueInput {
  id: String
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input CampaignCreateManyCreatedByInput {
  campaignSpecificFields: JSON
  checklistItemId: String
  createdAt: DateTime
  description: String!
  goal: Float!
  goalDeadline: DateTime!
  goalStartDate: DateTime!
  goalUnit: String!
  goalVerb: String
  id: String
  outcomes: CampaignCreateManyoutcomesInput
  realizedValue: Float!
  shortName: String!
  status: CampaignStatus!
  title: String!
  what: CampaignCreateManywhatInput
  why: CampaignCreateManywhyInput
}

input CampaignCreateManyCreatedByInputEnvelope {
  data: [CampaignCreateManyCreatedByInput!]!
  skipDuplicates: Boolean
}

input CampaignCreateManyoutcomesInput {
  set: [String!]!
}

input CampaignCreateManywhatInput {
  set: [String!]!
}

input CampaignCreateManywhyInput {
  set: [String!]!
}

input CampaignCreateNestedManyWithoutCreatedByInput {
  connect: [CampaignWhereUniqueInput!]
  connectOrCreate: [CampaignCreateOrConnectWithoutCreatedByInput!]
  create: [CampaignCreateWithoutCreatedByInput!]
  createMany: CampaignCreateManyCreatedByInputEnvelope
}

input CampaignCreateNestedManyWithoutUsersThatDidCompleteCampaignInput {
  connect: [CampaignWhereUniqueInput!]
  connectOrCreate: [CampaignCreateOrConnectWithoutUsersThatDidCompleteCampaignInput!]
  create: [CampaignCreateWithoutUsersThatDidCompleteCampaignInput!]
}

input CampaignCreateNestedOneWithoutChecklistItemInput {
  connect: CampaignWhereUniqueInput
  connectOrCreate: CampaignCreateOrConnectWithoutChecklistItemInput
  create: CampaignCreateWithoutChecklistItemInput
}

input CampaignCreateOrConnectWithoutChecklistItemInput {
  create: CampaignCreateWithoutChecklistItemInput!
  where: CampaignWhereUniqueInput!
}

input CampaignCreateOrConnectWithoutCreatedByInput {
  create: CampaignCreateWithoutCreatedByInput!
  where: CampaignWhereUniqueInput!
}

input CampaignCreateOrConnectWithoutUsersThatDidCompleteCampaignInput {
  create: CampaignCreateWithoutUsersThatDidCompleteCampaignInput!
  where: CampaignWhereUniqueInput!
}

input CampaignCreateWithoutChecklistItemInput {
  campaignSpecificFields: JSON
  createdAt: DateTime
  createdBy: UserCreateNestedOneWithoutCreatedCampaignsInput!
  description: String!
  goal: Float!
  goalDeadline: DateTime!
  goalStartDate: DateTime!
  goalUnit: String!
  goalVerb: String
  id: String
  outcomes: CampaignCreateoutcomesInput
  realizedValue: Float!
  shortName: String!
  status: CampaignStatus!
  title: String!
  usersThatDidCompleteCampaign: UserCreateNestedManyWithoutCompletedCampaignsInput
  what: CampaignCreatewhatInput
  why: CampaignCreatewhyInput
}

input CampaignCreateWithoutCreatedByInput {
  campaignSpecificFields: JSON
  checklistItem: ChecklistItemCreateNestedOneWithoutCampaignInput
  createdAt: DateTime
  description: String!
  goal: Float!
  goalDeadline: DateTime!
  goalStartDate: DateTime!
  goalUnit: String!
  goalVerb: String
  id: String
  outcomes: CampaignCreateoutcomesInput
  realizedValue: Float!
  shortName: String!
  status: CampaignStatus!
  title: String!
  usersThatDidCompleteCampaign: UserCreateNestedManyWithoutCompletedCampaignsInput
  what: CampaignCreatewhatInput
  why: CampaignCreatewhyInput
}

input CampaignCreateWithoutUsersThatDidCompleteCampaignInput {
  campaignSpecificFields: JSON
  checklistItem: ChecklistItemCreateNestedOneWithoutCampaignInput
  createdAt: DateTime
  createdBy: UserCreateNestedOneWithoutCreatedCampaignsInput!
  description: String!
  goal: Float!
  goalDeadline: DateTime!
  goalStartDate: DateTime!
  goalUnit: String!
  goalVerb: String
  id: String
  outcomes: CampaignCreateoutcomesInput
  realizedValue: Float!
  shortName: String!
  status: CampaignStatus!
  title: String!
  what: CampaignCreatewhatInput
  why: CampaignCreatewhyInput
}

input CampaignCreateoutcomesInput {
  set: [String!]!
}

input CampaignCreatewhatInput {
  set: [String!]!
}

input CampaignCreatewhyInput {
  set: [String!]!
}

input CampaignListRelationFilter {
  every: CampaignWhereInput
  none: CampaignWhereInput
  some: CampaignWhereInput
}

input CampaignOrderByRelationAggregateInput {
  _count: SortOrder
}

input CampaignRelationFilter {
  is: CampaignWhereInput
  isNot: CampaignWhereInput
}

enum CampaignStatus {
  ACTIVE
  CLOSED
  OPEN
}

input CampaignWhereInput {
  AND: [CampaignWhereInput!]
  NOT: [CampaignWhereInput!]
  OR: [CampaignWhereInput!]
  campaignSpecificFields: JsonNullableFilter
  checklistItem: ChecklistItemRelationFilter
  checklistItemId: StringNullableFilter
  createdAt: DateTimeFilter
  createdBy: UserRelationFilter
  createdByUserId: StringFilter
  description: StringFilter
  goal: FloatFilter
  goalDeadline: DateTimeFilter
  goalStartDate: DateTimeFilter
  goalUnit: StringFilter
  goalVerb: StringNullableFilter
  id: StringFilter
  outcomes: StringNullableListFilter
  realizedValue: FloatFilter
  shortName: StringFilter
  status: EnumCampaignStatusFilter
  title: StringFilter
  usersThatDidCompleteCampaign: UserListRelationFilter
  what: StringNullableListFilter
  why: StringNullableListFilter
}

input CampaignWhereUniqueInput {
  checklistItemId: String
  id: String
}

input ChecklistItemCreateNestedManyWithoutUsersThatDidCompleteChecklistItemInput {
  connect: [ChecklistItemWhereUniqueInput!]
  connectOrCreate: [ChecklistItemCreateOrConnectWithoutUsersThatDidCompleteChecklistItemInput!]
  create: [ChecklistItemCreateWithoutUsersThatDidCompleteChecklistItemInput!]
}

input ChecklistItemCreateNestedOneWithoutCampaignInput {
  connect: ChecklistItemWhereUniqueInput
  connectOrCreate: ChecklistItemCreateOrConnectWithoutCampaignInput
  create: ChecklistItemCreateWithoutCampaignInput
}

input ChecklistItemCreateOrConnectWithoutCampaignInput {
  create: ChecklistItemCreateWithoutCampaignInput!
  where: ChecklistItemWhereUniqueInput!
}

input ChecklistItemCreateOrConnectWithoutUsersThatDidCompleteChecklistItemInput {
  create: ChecklistItemCreateWithoutUsersThatDidCompleteChecklistItemInput!
  where: ChecklistItemWhereUniqueInput!
}

input ChecklistItemCreateWithoutCampaignInput {
  id: String
  name: String!
  usersThatDidCompleteChecklistItem: UserCreateNestedManyWithoutCompletedChecklistItemsInput
}

input ChecklistItemCreateWithoutUsersThatDidCompleteChecklistItemInput {
  campaign: CampaignCreateNestedOneWithoutChecklistItemInput
  id: String
  name: String!
}

input ChecklistItemListRelationFilter {
  every: ChecklistItemWhereInput
  none: ChecklistItemWhereInput
  some: ChecklistItemWhereInput
}

input ChecklistItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChecklistItemRelationFilter {
  is: ChecklistItemWhereInput
  isNot: ChecklistItemWhereInput
}

input ChecklistItemWhereInput {
  AND: [ChecklistItemWhereInput!]
  NOT: [ChecklistItemWhereInput!]
  OR: [ChecklistItemWhereInput!]
  campaign: CampaignRelationFilter
  id: StringFilter
  name: StringFilter
  usersThatDidCompleteChecklistItem: UserListRelationFilter
}

input ChecklistItemWhereUniqueInput {
  id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumCampaignStatusFilter {
  equals: CampaignStatus
  in: [CampaignStatus!]
  not: NestedEnumCampaignStatusFilter
  notIn: [CampaignStatus!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonNullableFilter {
  equals: JSON
  not: JSON
}

type Mutation {
  createUser(data: UserCreateInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumCampaignStatusFilter {
  equals: CampaignStatus
  in: [CampaignStatus!]
  not: NestedEnumCampaignStatusFilter
  notIn: [CampaignStatus!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type User {
  _count: UserCount
  banned: Boolean!
  createdAt: DateTime!
  cred: Int!
  email: String!
  emailIsVerified: Boolean!
  id: String!
  isAdmin: Boolean!
  username: String!
}

type UserCount {
  bankCampaignCompletions: Int!
  completedCampaigns: Int!
  completedChecklistItems: Int!
  createdCampaigns: Int!
}

input UserCreateInput {
  bankCampaignCompletions: BankCampaignCompletionCreateNestedManyWithoutBelongsToUserInput
  banned: Boolean
  completedCampaigns: CampaignCreateNestedManyWithoutUsersThatDidCompleteCampaignInput
  completedChecklistItems: ChecklistItemCreateNestedManyWithoutUsersThatDidCompleteChecklistItemInput
  createdAt: DateTime
  createdCampaigns: CampaignCreateNestedManyWithoutCreatedByInput
  cred: Int!
  email: String!
  emailIsVerified: Boolean!
  id: String
  isAdmin: Boolean!
  magicLinkToken: String
  password: String!
  username: String!
}

input UserCreateNestedManyWithoutCompletedCampaignsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutCompletedCampaignsInput!]
  create: [UserCreateWithoutCompletedCampaignsInput!]
}

input UserCreateNestedManyWithoutCompletedChecklistItemsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutCompletedChecklistItemsInput!]
  create: [UserCreateWithoutCompletedChecklistItemsInput!]
}

input UserCreateNestedOneWithoutCreatedCampaignsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCreatedCampaignsInput
  create: UserCreateWithoutCreatedCampaignsInput
}

input UserCreateOrConnectWithoutCompletedCampaignsInput {
  create: UserCreateWithoutCompletedCampaignsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCompletedChecklistItemsInput {
  create: UserCreateWithoutCompletedChecklistItemsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCreatedCampaignsInput {
  create: UserCreateWithoutCreatedCampaignsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCompletedCampaignsInput {
  bankCampaignCompletions: BankCampaignCompletionCreateNestedManyWithoutBelongsToUserInput
  banned: Boolean
  completedChecklistItems: ChecklistItemCreateNestedManyWithoutUsersThatDidCompleteChecklistItemInput
  createdAt: DateTime
  createdCampaigns: CampaignCreateNestedManyWithoutCreatedByInput
  cred: Int!
  email: String!
  emailIsVerified: Boolean!
  id: String
  isAdmin: Boolean!
  magicLinkToken: String
  password: String!
  username: String!
}

input UserCreateWithoutCompletedChecklistItemsInput {
  bankCampaignCompletions: BankCampaignCompletionCreateNestedManyWithoutBelongsToUserInput
  banned: Boolean
  completedCampaigns: CampaignCreateNestedManyWithoutUsersThatDidCompleteCampaignInput
  createdAt: DateTime
  createdCampaigns: CampaignCreateNestedManyWithoutCreatedByInput
  cred: Int!
  email: String!
  emailIsVerified: Boolean!
  id: String
  isAdmin: Boolean!
  magicLinkToken: String
  password: String!
  username: String!
}

input UserCreateWithoutCreatedCampaignsInput {
  bankCampaignCompletions: BankCampaignCompletionCreateNestedManyWithoutBelongsToUserInput
  banned: Boolean
  completedCampaigns: CampaignCreateNestedManyWithoutUsersThatDidCompleteCampaignInput
  completedChecklistItems: ChecklistItemCreateNestedManyWithoutUsersThatDidCompleteChecklistItemInput
  createdAt: DateTime
  cred: Int!
  email: String!
  emailIsVerified: Boolean!
  id: String
  isAdmin: Boolean!
  magicLinkToken: String
  password: String!
  username: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByWithRelationInput {
  bankCampaignCompletions: BankCampaignCompletionOrderByRelationAggregateInput
  banned: SortOrder
  completedCampaigns: CampaignOrderByRelationAggregateInput
  completedChecklistItems: ChecklistItemOrderByRelationAggregateInput
  createdAt: SortOrder
  createdCampaigns: CampaignOrderByRelationAggregateInput
  cred: SortOrder
  email: SortOrder
  emailIsVerified: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  magicLinkToken: SortOrder
  password: SortOrder
  username: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  banned
  createdAt
  cred
  email
  emailIsVerified
  id
  isAdmin
  magicLinkToken
  password
  username
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  bankCampaignCompletions: BankCampaignCompletionListRelationFilter
  banned: BoolFilter
  completedCampaigns: CampaignListRelationFilter
  completedChecklistItems: ChecklistItemListRelationFilter
  createdAt: DateTimeFilter
  createdCampaigns: CampaignListRelationFilter
  cred: IntFilter
  email: StringFilter
  emailIsVerified: BoolFilter
  id: StringFilter
  isAdmin: BoolFilter
  magicLinkToken: StringNullableFilter
  password: StringFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}
