name: Dev Branch PR
on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x] # 16.13.2
    environment: dev
    
     # Docker Hub image that `container-job` executes in
    container: node:10.18-jessie

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Install pg_dump
        run: sudo apt-get install postgresql-client
        
      - name: DEBUG
        run: |
          which psql
          which pg_dump
    
      - uses: actions/checkout@v2
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.0.2
          run_install: false

      - name: Create api .env file
        run: |
          cd apps/api
          touch .env

          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          echo DATABASE_USER=${{ secrets.DATABASE_USER }} >> .env
          echo DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} >> .env
          echo PGPASSWORD=${{ secrets.DATABASE_PASSWORD }} >> .env
          echo DATABASE_HOST=${{ secrets.DATABASE_HOST }} >> .env
          echo DATABASE_PORT=${{ secrets.DATABASE_PORT }} >> .env
          echo DATABASE_NAME=${{ secrets.DATABASE_NAME }} >> .env

          # Staging Database
          echo STAGING_DATABASE_USER=${{ secrets.STAGING_DATABASE_USER }} >> .env
          echo STAGING_DATABASE_PASSWORD=${{ secrets.STAGING_DATABASE_PASSWORD }} >> .env
          echo STAGING_DATABASE_HOST=${{ secrets.STAGING_DATABASE_HOST }} >> .env
          echo STAGING_DATABASE_PORT=${{ secrets.STAGING_DATABASE_PORT }} >> .env
          echo STAGING_DATABASE_NAME=${{ secrets.STAGING_DATABASE_NAME }} >> .env
          echo CORS_ORIGIN=https://ls.localhost >> .env
          echo API_KEY=${{ secrets.API_KEY }} >> .env
          echo TOKEN_SECRET=${{ secrets.TOKEN_SECRET }} >> .env
          echo COOKIE_SECRET=${{ secrets.COOKIE_SECRET }} >> .env
          echo NODE_ENV=test >> .env
          echo SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }} >> .env
          echo PORT=3001 >> .env

          cat .env
          cd ../../

      - name: Create client .env file
        run: |
          ls -la
          cd apps/client
          touch .env

          echo VITE_SVELTEKIT_HOST=${{ secrets.VITE_SVELTEKIT_HOST }} >> .env
          echo VITE_HOST_ADDRESS=${{ secrets.VITE_HOST_ADDRESS }} >> .env
          echo API_KEY=${{ secrets.API_KEY }} >> .env
          echo API_HOST=${{ secrets.API_HOST }} >> .env
          echo API_PATH=${{ secrets.API_PATH }} >> .env
          echo NODE_ENV=test >> .env
          echo PORT=3000 >> .env

          cat .env
          cd ../../

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
        env:
          DATABASE_URL: $DATABASE_URL

      # Install
      - run: pnpm install --no-frozen-lockfile

      # Reset & Restore Dev DB
      - run: pnpm branch

      # Run new migrations
      - run: pnpm migrate:deploy

      # Generate TS
      - run: pnpm generate

      # Tests
      - run: pnpm test:ci

      # Build smoke-test
      - run: pnpm build
