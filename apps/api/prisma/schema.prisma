datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

model User {
  id              String  @id @default(cuid())
  email           String  @unique
  username        String  @unique
  emailIsVerified Boolean
  cred            Int
  isAdmin         Boolean

  /// @TypeGraphQL.omit(output: true)
  password           String
  /// @TypeGraphQL.omit(output: true)
  magicLinkToken     String? // Email address verification token
  /// @TypeGraphQL.omit(output: true)
  passwordResetToken String?

  banned    Boolean  @default(false)
  createdAt DateTime @default(now())

  completedCampaigns Campaign[] @relation(name: "UserCompletedCampaigns", references: [id])

  // Campaign Data
  bankExodusCompletions         BankExodusCompletion[] @relation(name: "UserBankExodusCompletions")
  reviewedBankExodusCompletions BankExodusCompletion[] @relation("BankExodusCompletionReviewedByUser")
}

model ArtificiallyExpiredRefreshToken {
  id               String   @id @default(cuid())
  value            String
  actualExpiration DateTime
}

enum CampaignStatus {
  // Campaign is not yet started
  NOT_STARTED

  // Campaign is visible under "Current Campaigns" on index page
  ACTIVE

  // Users may still participate in the Campaign, but it is not featured under "Current Campaigns" on index page
  OPEN

  // Users may no longer participate in the Campaign
  CLOSED
}

model Campaign {
  id String @id @default(cuid())

  usersThatDidCompleteCampaign User[] @relation(name: "UserCompletedCampaigns", references: [id])

  /// @TypeGraphQL.omit(input: ["create", "update"])
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(input: ["create", "update"])
  updatedAt DateTime @default(now())

  credRewarded Int @default(0)

  status CampaignStatus @default(NOT_STARTED)

  tags Tag[]

  title String

  checklistTitle String? // The checklist item title

  // "Goal goalUnits goalVerb-ed by goalDeadline
  // Example: 10,000 petitioners signed up by 05/01/2022
  // Example: 100,000 dollars raised by 05/01/2022
  goal     Float
  goalUnit String // singular
  goalVerb String?

  // Deadline fields
  goalStartDate DateTime
  goalDeadline  DateTime

  // ------------------ Campaign Page fields ---------------------
  what     String[] // array of paragraphs
  why      String[] // array of paragraphs
  outcomes String[] // array of paragraphs

  // ------------------ Admin / DX fields ------------------------
  shortName String
}

// ------------------------
// Campaign-specific models
// ------------------------

model BankExodusCompletion {
  id String @id @default(cuid())

  belongsToUser User   @relation(name: "UserBankExodusCompletions", fields: [userId], references: [id])
  userId        String

  campaignId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  withdrawalReceiptImageURL String
  imageKitFileId            String

  isAnonymous                Boolean
  withdrawalAmount           Float
  originInstitutionName      String
  destinationInstitutionName String

  // Reasons for moving to this destination bank
  dontInvestInFossilFuels        Boolean
  dontInvestInSLABS              Boolean
  dontChargeAccountFees          Boolean
  offerFairRatesToAccountHolders Boolean
  conscientiousAboutHumanRights  Boolean
  other                          Boolean
  otherInfo                      String

  wasApprovedByAdmin Boolean @default(false)
  wasReviewedByAdmin Boolean @default(false)
  reviewedByUserId   String?
  reviewedByUser     User?   @relation(name: "BankExodusCompletionReviewedByUser", fields: [reviewedByUserId], references: [id])
}

model Tag {
  id   String @id @default(cuid())
  name String

  campaigns Campaign[]
}
